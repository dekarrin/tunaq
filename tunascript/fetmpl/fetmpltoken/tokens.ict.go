// Package fetmpltoken contains the token classes used by the frontend
// of TunaQuest Template. It is in a separate package so that it can be imported and
// used by external packages while still allowing those external packages to be
// imported by the rest of the frontend.
package fetmpltoken

/*
File automatically generated by the ictiobus compiler. DO NOT EDIT. This was
created by invoking ictiobus with the following command:

    ictcc --slr -l TunaQuest Template -v 1.0 -d tte --sim-off --ir github.com/dekarrin/tunaq/tunascript/syntax.Template --hooks ./tunascript/syntax --hooks-table TmplHooksTable --dest ./tunascript/fetmpl --pkg fetmpl tunascript/expansion.md
*/

import (
	"github.com/dekarrin/ictiobus/lex"
)

var (
	// TCElse is the token class representing an else in TunaQuest Template.
	TCElse = lex.NewTokenClass("else", "else")

	// TCElseif is the token class representing an elseif in TunaQuest Template.
	TCElseif = lex.NewTokenClass("elseif", "elseif")

	// TCEndif is the token class representing an endif in TunaQuest Template.
	TCEndif = lex.NewTokenClass("endif", "endif")

	// TCFlag is the token class representing a flag in TunaQuest Template.
	TCFlag = lex.NewTokenClass("flag", "flag")

	// TCIf is the token class representing an if in TunaQuest Template.
	TCIf = lex.NewTokenClass("if", "if")

	// TCText is the token class representing a text in TunaQuest Template.
	TCText = lex.NewTokenClass("text", "text")
)

var all = map[string]lex.TokenClass{
	"else":   TCElse,
	"elseif": TCElseif,
	"endif":  TCEndif,
	"flag":   TCFlag,
	"if":     TCIf,
	"text":   TCText,
}

// ByID returns the TokenClass in TunaQuest Template that has the given ID. If no token
// class with that ID exists, nil is returned.
func ByID(id string) lex.TokenClass {
	return all[id]
}
