package expfe

/*
File automatically generated by the ictiobus compiler. DO NOT EDIT. This was
created by invoking ictiobus with the following command:

    ictcc --slr -l TQTextExpansion -v 1.0 -d tte --sim-off --ir github.com/dekarrin/tunaq/tunascript/syntax.Template --hooks ./tunascript/syntax --hooks-table TmplHooksTable --dest ./tunascript/expfe --pkg expfe tunascript/expansion.md
*/

import (
	_ "embed"

	"github.com/dekarrin/ictiobus/grammar"
	"github.com/dekarrin/ictiobus/parse"

	"github.com/dekarrin/tunaq/tunascript/expfe/expfetoken"
)

var (
	//go:embed parser.cff
	parserData []byte
)

// Grammar returns the grammar accepted by the generated ictiobus parser for
// TQTextExpansion. This grammar will also be included with with the parser itself,
// but it is included here as well for convenience.
func Grammar() grammar.CFG {
	g := grammar.CFG{}

	g.AddTerm(expfetoken.TCElse.ID(), expfetoken.TCElse)
	g.AddTerm(expfetoken.TCElseif.ID(), expfetoken.TCElseif)
	g.AddTerm(expfetoken.TCEndif.ID(), expfetoken.TCEndif)
	g.AddTerm(expfetoken.TCFlag.ID(), expfetoken.TCFlag)
	g.AddTerm(expfetoken.TCIf.ID(), expfetoken.TCIf)
	g.AddTerm(expfetoken.TCText.ID(), expfetoken.TCText)

	g.AddRule("EXPANSION", []string{"BLOCKS"})

	g.AddRule("BLOCKS", []string{"BLOCKS", "BLOCK"})
	g.AddRule("BLOCKS", []string{"BLOCK"})

	g.AddRule("BLOCK", []string{"text"})
	g.AddRule("BLOCK", []string{"flag"})
	g.AddRule("BLOCK", []string{"BRANCH"})

	g.AddRule("BRANCH", []string{"if", "BLOCKS", "endif"})
	g.AddRule("BRANCH", []string{"if", "BLOCKS", "ELSEIFS", "endif"})
	g.AddRule("BRANCH", []string{"if", "BLOCKS", "else", "BLOCKS", "endif"})
	g.AddRule("BRANCH", []string{"if", "BLOCKS", "ELSEIFS", "else", "BLOCKS", "endif"})

	g.AddRule("ELSEIFS", []string{"ELSEIFS", "elseif", "BLOCKS"})
	g.AddRule("ELSEIFS", []string{"elseif", "BLOCKS"})

	return g
}

// Parser returns the generated ictiobus Parser for TQTextExpansion.
func Parser() parse.Parser {
	p, err := parse.DecodeBytes(parserData)
	if err != nil {
		panic("corrupted parser.cff file: " + err.Error())
	}

	return p
}
